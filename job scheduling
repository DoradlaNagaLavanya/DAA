int max(int a,int b)
{
    if(a>b)
        return a;
    else
        return b;
}


int jobScheduling(int* startTime, int startTimeSize, int* endTime, int endTimeSize, int* profit, int profitSize){
        int n = startTimeSize;
        int i;
        int arr[n][3];
        
        for(i=0;i<n;i++){
            for(int j=i;j<n;j++){
                if(endTime[i]>endTime[j]){
                    int t = endTime[i];
                    endTime[i] = endTime[j];
                    endTime[j] = t;
                    int t1 = startTime[i];
                    startTime[i] = startTime[j];
                    startTime[j] = t1;
                    int t2 = profit[i];
                    profit[i] = profit[j];
                    profit[j] = t2;
                }
            }
        }

        
        for(int i = 0; i < n; i++)
        {
            int start = startTime[i];
            
            int end = endTime[i];
            
            int profitt = profit[i];
            
            arr[i][0] = end;
            arr[i][1] = start;
            arr[i][2] = profitt;
        }

        
        int dp[n];
        

        
        dp[0] = arr[0][2];
        for(int i = 1; i < n; i++)
        {
           
            
            int include = arr[i][2];
            
            int low = 0;
            
            int high = n - 1;
            
            int last_idx = -1;
            
            while(low <= high)
            {
                int mid = low + (high - low) / 2;
                
                
                if(arr[mid][0] <= arr[i][1])
                {
                    last_idx = mid;
                    
                    low = mid + 1;
                }
                else
                {
                    high = mid - 1;
                }
            }
            
            
            if(last_idx != -1)
            {
                include += dp[last_idx];
            }
            
            
            int exclude = dp[i - 1];
            
            
            dp[i] = max(include, exclude);
        }
        
        return dp[n - 1];
    }
